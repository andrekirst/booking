# Pi Zero 2 W optimierter Dockerfile für .NET 9 Backend
# Memory-Optimierung für 512MB RAM Constraint

# Build stage - Memory-optimiert
FROM mcr.microsoft.com/dotnet/sdk:9.0-alpine AS build
WORKDIR /src

# Umgebungsvariablen für Build-Optimierung
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1
ENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
ENV DOTNET_USE_POLLING_FILE_WATCHER=1
ENV NUGET_XMLDOC_MODE=skip

# Copy solution and project files
COPY Directory.Packages.props ./
COPY BookingSystem.sln ./
COPY Booking.Api/Booking.Api.csproj ./Booking.Api/
COPY Booking.Api.Tests/Booking.Api.Tests.csproj ./Booking.Api.Tests/

# Restore dependencies mit Memory-Optimierung
RUN dotnet restore --disable-parallel --verbosity quiet

# Copy source code
COPY . .

# Build application mit Memory-Constraints
RUN dotnet build -c Release --no-restore -p:UseSharedCompilation=false -p:TreatWarningsAsErrors=false

# Publish application mit Pi Zero Optimierungen
RUN dotnet publish Booking.Api/Booking.Api.csproj \
    -c Release \
    -o /app/publish \
    --no-restore \
    --no-build \
    -p:PublishTrimmed=true \
    -p:PublishSingleFile=false \
    -p:PublishReadyToRun=false \
    -p:EnableCompressionInSingleFile=false \
    -p:DebugType=None \
    -p:DebugSymbols=false

# Runtime stage - Ultra-minimal für Pi Zero
FROM mcr.microsoft.com/dotnet/aspnet:9.0-alpine AS runtime
WORKDIR /app

# Pi Zero spezifische Pakete (minimal)
RUN apk add --no-cache \
    postgresql-client=16.4-r0 \
    curl=8.5.0-r0 \
    tzdata=2024a-r0 \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Copy published application
COPY --from=build /app/publish .

# Non-root user für Sicherheit und Memory-Effizienz
RUN addgroup -g 1000 appuser && \
    adduser -u 1000 -G appuser -s /bin/sh -D appuser && \
    chown -R appuser:appuser /app
USER appuser

# Pi Zero 2 W Memory-Optimierung (kritisch!)
ENV ASPNETCORE_URLS=http://+:8080
ENV ASPNETCORE_ENVIRONMENT=Production

# .NET GC-Optimierung für Pi Zero (ARM64 + 512MB RAM)
ENV DOTNET_GCHeapHardLimit=70000000      # 70MB Hard Limit (kritisch!)
ENV DOTNET_GCHeapCount=1                 # Single GC Heap für Pi Zero
ENV DOTNET_GCConcurrent=0                # Concurrent GC deaktiviert (Memory sparen)
ENV DOTNET_GCServer=0                    # Workstation GC (weniger Memory)
ENV DOTNET_GCRetainVM=0                  # VM-Memory sofort freigeben
ENV DOTNET_GCLOHThreshold=5000           # Smaller Large Object Heap
ENV DOTNET_ReadyToRun=0                  # R2R deaktiviert für weniger Memory

# Globalization für Pi Zero
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1

# Kestrel-Limits für Pi Zero
ENV ASPNETCORE_Kestrel__Limits__MaxConcurrentConnections=20
ENV ASPNETCORE_Kestrel__Limits__MaxConcurrentUpgradedConnections=20
ENV ASPNETCORE_Kestrel__Limits__MaxRequestBodySize=1048576
ENV ASPNETCORE_Kestrel__Limits__KeepAliveTimeout=00:01:00

# JSON Serializer Memory-Optimierung
ENV DOTNET_JsonSerializerOptions__DefaultBufferSize=4096

# Expose port
EXPOSE 8080

# Health check - Memory-schonend
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Pi Zero spezifische Startup-Optimierung
ENTRYPOINT ["dotnet", "Booking.Api.dll", "--server.urls", "http://+:8080"]