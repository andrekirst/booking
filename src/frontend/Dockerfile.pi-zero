# Pi Zero 2 W optimierter Dockerfile für Next.js 15 Frontend
# Memory-Optimierung für 512MB RAM Constraint

# Build stage - Memory-optimiert
FROM node:20-alpine AS build
WORKDIR /app

# Memory-Limits für Node.js Build
ENV NODE_OPTIONS="--max-old-space-size=512 --max-semi-space-size=64"
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Copy package files
COPY package*.json ./

# Install dependencies mit Memory-Constraints
RUN npm ci --only=production --no-audit --no-fund --quiet \
    && npm cache clean --force

# Copy source code
COPY . .

# Pi Zero optimierte Next.js Konfiguration
RUN echo '/** @type {import("next").NextConfig} */' > next.config.js && \
    echo 'const nextConfig = {' >> next.config.js && \
    echo '  output: "export",' >> next.config.js && \
    echo '  trailingSlash: true,' >> next.config.js && \
    echo '  images: { unoptimized: true },' >> next.config.js && \
    echo '  experimental: {' >> next.config.js && \
    echo '    optimizePackageImports: ["@heroicons/react"]' >> next.config.js && \
    echo '  },' >> next.config.js && \
    echo '  compiler: {' >> next.config.js && \
    echo '    removeConsole: process.env.NODE_ENV === "production"' >> next.config.js && \
    echo '  }' >> next.config.js && \
    echo '};' >> next.config.js && \
    echo 'module.exports = nextConfig;' >> next.config.js

# Build static Next.js für Pi Zero (ohne Node.js Runtime!)
RUN npm run build

# Runtime stage - Ultra-minimal nginx für Static Files
FROM nginx:alpine AS runtime

# Pi Zero spezifische nginx-Konfiguration
RUN echo 'worker_processes 1;' > /etc/nginx/nginx.conf && \
    echo 'worker_rlimit_nofile 1024;' >> /etc/nginx/nginx.conf && \
    echo 'events {' >> /etc/nginx/nginx.conf && \
    echo '  worker_connections 512;' >> /etc/nginx/nginx.conf && \
    echo '  use epoll;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf && \
    echo 'http {' >> /etc/nginx/nginx.conf && \
    echo '  include /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
    echo '  default_type application/octet-stream;' >> /etc/nginx/nginx.conf && \
    echo '  sendfile on;' >> /etc/nginx/nginx.conf && \
    echo '  tcp_nopush on;' >> /etc/nginx/nginx.conf && \
    echo '  tcp_nodelay on;' >> /etc/nginx/nginx.conf && \
    echo '  keepalive_timeout 30;' >> /etc/nginx/nginx.conf && \
    echo '  gzip on;' >> /etc/nginx/nginx.conf && \
    echo '  gzip_comp_level 6;' >> /etc/nginx/nginx.conf && \
    echo '  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;' >> /etc/nginx/nginx.conf && \
    echo '  server {' >> /etc/nginx/nginx.conf && \
    echo '    listen 80;' >> /etc/nginx/nginx.conf && \
    echo '    root /usr/share/nginx/html;' >> /etc/nginx/nginx.conf && \
    echo '    index index.html;' >> /etc/nginx/nginx.conf && \
    echo '    location / {' >> /etc/nginx/nginx.conf && \
    echo '      try_files $uri $uri/ $uri.html /index.html;' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '    location /api/ {' >> /etc/nginx/nginx.conf && \
    echo '      proxy_pass http://backend-agent2:8080/api/;' >> /etc/nginx/nginx.conf && \
    echo '      proxy_set_header Host $host;' >> /etc/nginx/nginx.conf && \
    echo '      proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {' >> /etc/nginx/nginx.conf && \
    echo '      expires 1y;' >> /etc/nginx/nginx.conf && \
    echo '      add_header Cache-Control "public, immutable";' >> /etc/nginx/nginx.conf && \
    echo '    }' >> /etc/nginx/nginx.conf && \
    echo '  }' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf

# Copy static files from build stage
COPY --from=build /app/out /usr/share/nginx/html

# Remove default nginx files
RUN rm -rf /var/cache/nginx/* && \
    rm -rf /tmp/*

# Expose port
EXPOSE 80

# Pi Zero Memory-optimierte nginx
CMD ["nginx", "-g", "daemon off;"]