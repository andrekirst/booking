# AUTOMATISCH GENERIERT - NICHT MANUELL BEARBEITEN!
# Generiert von: generate-agent-configs.sh am Fr 25. Jul 20:29:42 CEST 2025
# Template: docker-compose.agent-template.yml
# Agent: 2 | Ports: 60201/60202/60203

version: '3.8'

# Multi-Agent Docker Compose Template
# Dieses Template wird von generate-agent-configs.sh verwendet, um 
# spezifische Agent-Konfigurationen zu generieren
#
# Platzhalter:
# 2 - wird durch die Agent-Nummer (2-4) ersetzt
# 60200 - wird durch den Basis-Port (60200, 60300, 60400) ersetzt
# 60201 - wird durch Frontend-Port (60200+1) ersetzt
# 60202 - wird durch Backend-Port (60200+2) ersetzt
# 60203 - wird durch DB-Port (60200+3) ersetzt

services:
  postgres-agent2:
    image: postgres:16-alpine
    container_name: booking-postgres-agent2
    environment:
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_password
      POSTGRES_DB: booking_agent2
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "60203:5432"  # Agent 2 PostgreSQL Port
    volumes:
      - postgres_agent2_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking_user -d booking_agent2"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - booking-agent2-network

  backend-agent2:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: booking-api-agent2
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:80"
      ConnectionStrings__DefaultConnection: "Host=postgres-agent2;Port=5432;Database=booking_agent2;Username=booking_user;Password=booking_password"
      CorsSettings__AllowedOrigins: "http://localhost:60201"
      JwtSettings__Secret: "development-jwt-secret-key-for-agent2-testing-only-256-bits-minimum"
      JwtSettings__Issuer: "BookingApi-Agent2"
      JwtSettings__Audience: "BookingApp-Agent2"
      JwtSettings__ExpirationMinutes: "480"
    ports:
      - "60202:80"  # Agent 2 Backend Port
    depends_on:
      postgres-agent2:
        condition: service_healthy
    volumes:
      # Worktree-spezifisches Volume für Agent 2
      - ../booking-agent2/src/backend:/app/src:ro
    networks:
      - booking-agent2-network
    restart: unless-stopped

  frontend-agent2:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
    container_name: booking-frontend-agent2
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:60202"
      PORT: "3000"
    ports:
      - "60201:3000"  # Agent 2 Frontend Port
    volumes:
      # Worktree-spezifisches Volume für Agent 2
      - ../booking-agent2/src/frontend:/app:cached
      - /app/node_modules
      - /app/.next
    networks:
      - booking-agent2-network
    restart: unless-stopped

volumes:
  postgres_agent2_data:

networks:
  booking-agent2-network:
    driver: bridge
    name: booking-agent2-network