# Nginx Production Configuration für Raspberry Pi Zero 2 W
# Optimiert für Performance, Sicherheit und minimalen Ressourcenverbrauch

# Main context - Globale Einstellungen für Pi Zero
user nginx;
worker_processes 2;  # Optimal für ARM Cortex-A53 Quad-Core
worker_cpu_affinity 01 10;  # CPU-Affinität für bessere Performance
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events context - Connection handling optimiert für Pi Zero
events {
    worker_connections 512;  # Reduziert für Pi Zero (vs. 1024)
    use epoll;
    accept_mutex on;
    accept_mutex_delay 100ms;
    multi_accept on;
}

# HTTP context - Main configuration
http {
    # Basic Settings für Pi Zero Performance
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Performance optimizations für ARM64
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30s;
    keepalive_requests 30;
    reset_timedout_connection on;
    
    # Client settings - Sicherheit und Performance
    client_max_body_size 10M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Gzip compression - Optimiert für Pi Zero CPU
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 4;  # Kompromiss zwischen CPU und Bandbreite
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli compression (optional, falls verfügbar)
    # brotli on;
    # brotli_comp_level 4;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # SSL Configuration - Modern und sicher
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;  # Reduziert für Pi Zero
    ssl_session_timeout 24h;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'self';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # HSTS (nur bei HTTPS)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Rate Limiting - DDoS-Schutz für Pi Zero
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=static:10m rate=30r/s;
    
    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Log format - Optimiert für Monitoring
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main buffer=32k flush=5s;
    
    # Upstream Backend - Load Balancing vorbereitet
    upstream backend {
        server backend:8080 max_fails=3 fail_timeout=30s;
        keepalive 4;  # Reduziert für Pi Zero Memory
    }
    
    upstream frontend {
        server frontend:80 max_fails=2 fail_timeout=30s;
        keepalive 2;
    }
    
    # Server Blocks werden in separater Datei definiert
    include /etc/nginx/conf.d/*.conf;
}