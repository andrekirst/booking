# PostgreSQL Production Configuration für Raspberry Pi Zero 2 W
# Optimiert für 512MB RAM und ARM64 Cortex-A53 Architektur

# =============================================================================
# CONNECTION AND AUTHENTICATION
# =============================================================================
listen_addresses = '*'
port = 5432
max_connections = 20  # Reduziert für Pi Zero (vs. 100)
superuser_reserved_connections = 2

# Authentication
ssl = on
ssl_cert_file = '/var/lib/postgresql/data/server.crt'
ssl_key_file = '/var/lib/postgresql/data/server.key'
ssl_ca_file = '/var/lib/postgresql/data/ca.crt'
ssl_crl_file = ''
ssl_ciphers = 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256'
ssl_prefer_server_ciphers = on
ssl_ecdh_curve = 'prime256v1'
ssl_dh_params_file = ''

# Password Encryption
password_encryption = scram-sha-256

# =============================================================================
# RESOURCE USAGE (MEMORY) - Optimiert für 512MB Pi Zero
# =============================================================================
shared_buffers = 32MB              # 8% der RAM (vs. 25% standard)
huge_pages = off                   # Nicht verfügbar auf Pi Zero
temp_buffers = 2MB                 # Temporäre Buffers
max_prepared_transactions = 0      # Prepared transactions deaktiviert
work_mem = 2MB                     # Arbeitsspeicher pro Operation
hash_mem_multiplier = 1.0
maintenance_work_mem = 8MB         # Maintenance-Operationen
autovacuum_work_mem = -1          # Use maintenance_work_mem
max_stack_depth = 2MB              # Stack-Tiefe reduziert
shared_memory_type = mmap          # Memory-Mapping für ARM
dynamic_shared_memory_type = posix # POSIX shared memory

# =============================================================================
# RESOURCE USAGE (DISK) - SSD-optimiert
# =============================================================================
max_files_per_process = 1000       # Reduziert für Pi Zero
shared_preload_libraries = ''      # Keine zusätzlichen Extensions

# =============================================================================
# WRITE-AHEAD LOGGING (WAL) - Performance für ARM
# =============================================================================
wal_level = replica                # Minimal für Replication Support
fsync = on                        # Sicherheit vor Performance
synchronous_commit = on           # Transaktionssicherheit
wal_sync_method = fdatasync       # Optimal für ARM/Linux
full_page_writes = on             # Data Integrity
wal_compression = on              # Kompression für weniger I/O
wal_log_hints = off               # Nicht benötigt
wal_buffers = 1MB                 # WAL-Buffer reduziert
wal_writer_delay = 200ms          # WAL-Writer Delay
commit_delay = 0
commit_siblings = 5

# WAL Archivierung für Backups
archive_mode = on
archive_command = 'cp %p /backups/wal/%f'
archive_timeout = 300             # 5 Minuten

# =============================================================================
# REPLICATION - Basis-Setup für zukünftige Erweiterung
# =============================================================================
max_wal_senders = 2               # Minimal für Backup-Streaming
max_replication_slots = 2
wal_keep_size = 64MB              # WAL-Retention reduziert
hot_standby = off

# =============================================================================
# QUERY TUNING - ARM Cortex-A53 Optimierung
# =============================================================================
random_page_cost = 1.1            # SSD-optimiert
seq_page_cost = 1.0
cpu_tuple_cost = 0.01
cpu_index_tuple_cost = 0.005
cpu_operator_cost = 0.0025
parallel_tuple_cost = 0.1
parallel_setup_cost = 1000.0
min_parallel_table_scan_size = 8MB
min_parallel_index_scan_size = 512kB
effective_cache_size = 128MB      # 25% der verfügbaren RAM

# =============================================================================
# ERROR REPORTING AND LOGGING - Production-ready
# =============================================================================
log_destination = 'stderr'
logging_collector = on
log_directory = '/var/log/postgresql'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_file_mode = 0600
log_rotation_age = 1d
log_rotation_size = 10MB          # Kleine Log-Files für Pi Zero
log_truncate_on_rotation = off

# Log Level
log_min_messages = warning
log_min_error_statement = error
log_min_duration_statement = 1000  # Log langsame Queries (1s+)

# Log Content
log_checkpoints = on
log_connections = on
log_disconnections = on
log_lock_waits = on
log_statement = 'ddl'             # Log nur DDL statements
log_replication_commands = off
log_temp_files = 10MB
log_autovacuum_min_duration = 250ms

# Process Information
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
log_timezone = 'UTC'

# =============================================================================
# PROCESS TITLE - Für Monitoring
# =============================================================================
cluster_name = 'booking-production'
update_process_title = on

# =============================================================================
# STATISTICS - Optimiert für Monitoring
# =============================================================================
track_activities = on
track_counts = on
track_io_timing = on
track_functions = pl               # PL/pgSQL functions
stats_temp_directory = '/var/run/postgresql/stats_temp'

# =============================================================================
# AUTOVACUUM - ARM-optimierte Einstellungen
# =============================================================================
autovacuum = on
log_autovacuum_min_duration = 250ms
autovacuum_max_workers = 2         # Reduziert für Pi Zero
autovacuum_naptime = 1min
autovacuum_vacuum_threshold = 50
autovacuum_vacuum_insert_threshold = 1000
autovacuum_analyze_threshold = 50
autovacuum_vacuum_scale_factor = 0.2
autovacuum_vacuum_insert_scale_factor = 0.2
autovacuum_analyze_scale_factor = 0.1
autovacuum_freeze_max_age = 200000000
autovacuum_multixact_freeze_max_age = 400000000
autovacuum_vacuum_cost_delay = 2ms  # Throttling für I/O
autovacuum_vacuum_cost_limit = 200

# =============================================================================
# CLIENT CONNECTION DEFAULTS
# =============================================================================
search_path = '"$user", public'
row_security = on
default_tablespace = ''
temp_tablespaces = ''
default_table_access_method = heap

# Locale Settings
datestyle = 'iso, mdy'
intervalstyle = 'postgres'
timezone = 'UTC'
timezone_abbreviations = 'Default'
lc_messages = 'C'
lc_monetary = 'C'
lc_numeric = 'C'
lc_time = 'C'
default_text_search_config = 'pg_catalog.english'

# =============================================================================
# LOCK MANAGEMENT - Pi Zero Optimierung
# =============================================================================
deadlock_timeout = 1s
max_locks_per_transaction = 64
max_pred_locks_per_transaction = 64
max_pred_locks_per_relation = -2
max_pred_locks_per_page = 2

# =============================================================================
# VERSION AND PLATFORM COMPATIBILITY
# =============================================================================
array_nulls = on
backslash_quote = safe_encoding
escape_string_warning = on
lo_compat_privileges = off
quote_all_identifiers = off
standard_conforming_strings = on
synchronize_seqscans = on

# =============================================================================
# ERROR HANDLING
# =============================================================================
exit_on_error = off
restart_after_crash = on
data_sync_retry = off

# =============================================================================
# PERFORMANCE OPTIMIERUNGEN speziell für ARM Cortex-A53
# =============================================================================

# Background Writer - Optimiert für SSD und ARM
bgwriter_delay = 200ms
bgwriter_lru_maxpages = 100
bgwriter_lru_multiplier = 2.0
bgwriter_flush_after = 0

# Checkpointer - Balance zwischen Performance und Sicherheit
checkpoint_timeout = 5min
checkpoint_completion_target = 0.9
checkpoint_flush_after = 0
checkpoint_warning = 30s
max_wal_size = 128MB              # Reduziert für Pi Zero Storage
min_wal_size = 64MB

# Planner Settings für kleine Datasets
enable_bitmapscan = on
enable_hashagg = on
enable_hashjoin = on
enable_indexscan = on
enable_indexonlyscan = on
enable_material = on
enable_mergejoin = on
enable_nestloop = on
enable_parallel_append = off       # Parallel queries aus für Pi Zero
enable_parallel_hash = off
enable_partition_pruning = on
enable_partitionwise_join = off
enable_partitionwise_aggregate = off
enable_seqscan = on
enable_sort = on
enable_tidscan = on

# =============================================================================
# CUSTOM VARIABLES für Application-spezifische Settings
# =============================================================================
# Können von der Booking-Anwendung genutzt werden
#custom.booking_system_version = '1.0.0'
#custom.max_booking_duration_days = '14'
#custom.cleanup_job_interval = '24h'