version: '3.8'

# Claude Code Sub-Agent Docker Compose Template
# Dieses Template wird f√ºr spezialisierte Sub-Agents verwendet
#
# Platzhalter:
# {SUB_AGENT_ID} - wird durch die Sub-Agent-ID (S1-S6) ersetzt
# {AGENT_ROLE} - wird durch die Agent-Rolle ersetzt (senior-developer, ui-developer, etc.)
# {BASE_PORT} - wird durch den Basis-Port ersetzt (60500, 60600, etc.)
# {FRONTEND_PORT} - wird durch Frontend-Port ({BASE_PORT}+1) ersetzt
# {BACKEND_PORT} - wird durch Backend-Port ({BASE_PORT}+2) ersetzt
# {DB_PORT} - wird durch DB-Port ({BASE_PORT}+3) ersetzt
# {CLAUDE_PORT} - wird durch Claude-Port ({BASE_PORT}+4) ersetzt

services:
  postgres-sub-agent{SUB_AGENT_ID}:
    image: postgres:16-alpine
    container_name: booking-postgres-sub-agent{SUB_AGENT_ID}
    environment:
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_password
      POSTGRES_DB: booking_sub_agent{SUB_AGENT_ID}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "{DB_PORT}:5432"  # Sub-Agent {SUB_AGENT_ID} PostgreSQL Port
    volumes:
      - postgres_sub_agent{SUB_AGENT_ID}_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking_user -d booking_sub_agent{SUB_AGENT_ID}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - booking-sub-agent{SUB_AGENT_ID}-network

  backend-sub-agent{SUB_AGENT_ID}:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: booking-api-sub-agent{SUB_AGENT_ID}
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:80"
      ConnectionStrings__DefaultConnection: "Host=postgres-sub-agent{SUB_AGENT_ID};Port=5432;Database=booking_sub_agent{SUB_AGENT_ID};Username=booking_user;Password=booking_password"
      CorsSettings__AllowedOrigins__0: "http://localhost:{FRONTEND_PORT}"
      CorsSettings__AllowedOrigins__1: "http://localhost:{CLAUDE_PORT}"
      JwtSettings__Secret: "development-jwt-secret-key-for-sub-agent{SUB_AGENT_ID}-{AGENT_ROLE}-testing-only-256-bits-minimum"
      JwtSettings__Issuer: "BookingApi-SubAgent{SUB_AGENT_ID}"
      JwtSettings__Audience: "BookingApp-SubAgent{SUB_AGENT_ID}"
      JwtSettings__ExpirationMinutes: "480"
      # Sub-Agent specific environment
      SUB_AGENT_ROLE: "{AGENT_ROLE}"
      SUB_AGENT_ID: "{SUB_AGENT_ID}"
    ports:
      - "{BACKEND_PORT}:80"  # Sub-Agent {SUB_AGENT_ID} Backend Port
    depends_on:
      postgres-sub-agent{SUB_AGENT_ID}:
        condition: service_healthy
    volumes:
      # Sub-Agent-spezifisches Volume
      - ../booking-sub-agent{SUB_AGENT_ID}/src/backend:/app/src:ro
    networks:
      - booking-sub-agent{SUB_AGENT_ID}-network
    restart: unless-stopped

  frontend-sub-agent{SUB_AGENT_ID}:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
    container_name: booking-frontend-sub-agent{SUB_AGENT_ID}
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:{BACKEND_PORT}/api"
      PORT: "3000"
      # Sub-Agent specific environment
      SUB_AGENT_ROLE: "{AGENT_ROLE}"
      SUB_AGENT_ID: "{SUB_AGENT_ID}"
      NEXT_PUBLIC_SUB_AGENT_MODE: "true"
    ports:
      - "{FRONTEND_PORT}:3000"  # Sub-Agent {SUB_AGENT_ID} Frontend Port
    volumes:
      # Sub-Agent-spezifisches Volume
      - ../booking-sub-agent{SUB_AGENT_ID}/src/frontend:/app:cached
      - /app/node_modules
      - /app/.next
    networks:
      - booking-sub-agent{SUB_AGENT_ID}-network
    restart: unless-stopped

  claude-sub-agent{SUB_AGENT_ID}:
    build:
      context: ./claude-integration
      dockerfile: Dockerfile.sub-agent
      args:
        AGENT_ROLE: "{AGENT_ROLE}"
        SUB_AGENT_ID: "{SUB_AGENT_ID}"
    container_name: claude-sub-agent{SUB_AGENT_ID}
    environment:
      CLAUDE_AGENT_ROLE: "{AGENT_ROLE}"
      CLAUDE_SUB_AGENT_ID: "{SUB_AGENT_ID}"
      CLAUDE_CONTEXT_PATH: "/workspace/CLAUDE-{AGENT_ROLE}.md"
      CLAUDE_WORKSPACE: "/workspace"
      # Integration URLs
      FRONTEND_URL: "http://localhost:{FRONTEND_PORT}"
      BACKEND_URL: "http://localhost:{BACKEND_PORT}"
      DATABASE_URL: "postgresql://booking_user:booking_password@postgres-sub-agent{SUB_AGENT_ID}:{DB_PORT}/booking_sub_agent{SUB_AGENT_ID}"
    ports:
      - "{CLAUDE_PORT}:3000"  # Sub-Agent {SUB_AGENT_ID} Claude Integration Port
    volumes:
      # Sub-Agent Workspace
      - ../booking-sub-agent{SUB_AGENT_ID}:/workspace:cached
      # Agent-specific configurations
      - ./config/sub-agents/CLAUDE-{AGENT_ROLE}.md:/workspace/CLAUDE.md:ro
      - ./config/sub-agents/{AGENT_ROLE}-settings.json:/workspace/.claude/settings.json:ro
    networks:
      - booking-sub-agent{SUB_AGENT_ID}-network
    restart: unless-stopped
    depends_on:
      - frontend-sub-agent{SUB_AGENT_ID}
      - backend-sub-agent{SUB_AGENT_ID}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_sub_agent{SUB_AGENT_ID}_data:
    name: booking_postgres_sub_agent{SUB_AGENT_ID}_data

networks:
  booking-sub-agent{SUB_AGENT_ID}-network:
    driver: bridge
    name: booking-sub-agent{SUB_AGENT_ID}-network