apiVersion: v1
kind: Secret
metadata:
  name: booking-system-secrets
  namespace: booking-system
  labels:
    app.kubernetes.io/name: booking-system
    app.kubernetes.io/component: configuration
type: Opaque
stringData:
  # Database credentials
  POSTGRES_USER: "booking_user"
  POSTGRES_PASSWORD: "booking_password_k8s_secure"
  
  # JWT Secrets
  JWT_SECRET: "production-jwt-secret-key-for-kubernetes-deployment-256-bits-minimum-security"
  JWT_ISSUER: "BookingApi-K8s"
  JWT_AUDIENCE: "BookingApp-K8s"
  
  # Claude API Keys (placeholder - replace with actual keys)
  CLAUDE_API_KEY_PRIMARY: "sk-ant-api03-REPLACE_WITH_ACTUAL_KEY"
  CLAUDE_API_KEY_SECONDARY: "sk-ant-api03-REPLACE_WITH_ACTUAL_SECONDARY_KEY"
  CLAUDE_API_KEY_SUB_AGENT_S1: "sk-ant-api03-REPLACE_WITH_SUB_AGENT_S1_KEY"
  CLAUDE_API_KEY_SUB_AGENT_S2: "sk-ant-api03-REPLACE_WITH_SUB_AGENT_S2_KEY"
  CLAUDE_API_KEY_SUB_AGENT_S3: "sk-ant-api03-REPLACE_WITH_SUB_AGENT_S3_KEY"
  CLAUDE_API_KEY_SUB_AGENT_S4: "sk-ant-api03-REPLACE_WITH_SUB_AGENT_S4_KEY"
  CLAUDE_API_KEY_SUB_AGENT_S5: "sk-ant-api03-REPLACE_WITH_SUB_AGENT_S5_KEY"
  CLAUDE_API_KEY_SUB_AGENT_S6: "sk-ant-api03-REPLACE_WITH_SUB_AGENT_S6_KEY"
  
  # Email service credentials
  SMTP_HOST: "smtp.example.com"
  SMTP_PORT: "587"
  SMTP_USERNAME: "booking@example.com"
  SMTP_PASSWORD: "smtp_password_secure"
  
  # Monitoring credentials
  GRAFANA_ADMIN_PASSWORD: "grafana_admin_password"
  PROMETHEUS_BASIC_AUTH: "prometheus:monitoring_password"
  
  # Database connection strings
  DB_CONNECTION_AGENT2: "Host=booking-agent2-postgres-service;Port=5432;Database=booking_agent2;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_AGENT3: "Host=booking-agent3-postgres-service;Port=5432;Database=booking_agent3;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_AGENT4: "Host=booking-agent4-postgres-service;Port=5432;Database=booking_agent4;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_SUB_S1: "Host=booking-sub-s1-postgres-service;Port=5432;Database=booking_sub_s1;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_SUB_S2: "Host=booking-sub-s2-postgres-service;Port=5432;Database=booking_sub_s2;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_SUB_S3: "Host=booking-sub-s3-postgres-service;Port=5432;Database=booking_sub_s3;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_SUB_S4: "Host=booking-sub-s4-postgres-service;Port=5432;Database=booking_sub_s4;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_SUB_S5: "Host=booking-sub-s5-postgres-service;Port=5432;Database=booking_sub_s5;Username=booking_user;Password=booking_password_k8s_secure"
  DB_CONNECTION_SUB_S6: "Host=booking-sub-s6-postgres-service;Port=5432;Database=booking_sub_s6;Username=booking_user;Password=booking_password_k8s_secure"
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: booking-system
  labels:
    app.kubernetes.io/name: booking-system
    app.kubernetes.io/component: security
type: kubernetes.io/tls
data:
  # Base64 encoded TLS certificate and key
  # Generate with: kubectl create secret tls tls-certificates --cert=booking.crt --key=booking.key --dry-run=client -o yaml
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t