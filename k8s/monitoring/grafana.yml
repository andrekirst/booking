# Grafana monitoring dashboards for booking system

# Grafana ConfigMap for datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: booking-system
  labels:
    app: grafana
    component: monitoring
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-service:9090
      isDefault: true
      editable: true
---
# Grafana ConfigMap for dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: booking-system
  labels:
    app: grafana
    component: monitoring
data:
  booking-system-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Booking System Overview",
        "tags": ["booking", "system"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Active Agents",
            "type": "stat",
            "targets": [
              {
                "expr": "count(up{job=~\"booking-agents|claude-sub-agents\"} == 1)",
                "legendFormat": "Active Agents"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "CPU Usage by Agent",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{pod=~\"booking-.*\"}[5m]) * 100",
                "legendFormat": "{{ pod }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Memory Usage by Agent",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{pod=~\"booking-.*\"} / 1024 / 1024",
                "legendFormat": "{{ pod }}"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "id": 4,
            "title": "Claude API Requests/sec",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(claude_api_requests_total[5m])",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 5,
            "title": "Claude API Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "claude_api_response_time_seconds",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 6,
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_database_numbackends",
                "legendFormat": "{{ database_instance }}"
              }
            ],
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 16}
          },
          {
            "id": 7,
            "title": "Agent Queue Lengths",
            "type": "graph",
            "targets": [
              {
                "expr": "claude_agent_queue_size",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 16}
          },
          {
            "id": 8,
            "title": "Pod Restarts",
            "type": "table",
            "targets": [
              {
                "expr": "increase(kube_pod_container_status_restarts_total{namespace=\"booking-system\"}[24h])",
                "legendFormat": "{{ pod }}"
              }
            ],
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 16}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }
  
  claude-agents-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Claude Sub-Agents Dashboard",
        "tags": ["claude", "sub-agents"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Sub-Agent Status",
            "type": "stat",
            "targets": [
              {
                "expr": "count by (sub_agent_id) (up{job=\"claude-sub-agents\"} == 1)",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 6, "w": 24, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "API Requests by Sub-Agent",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(claude_api_requests_total[5m])",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 6}
          },
          {
            "id": 3,
            "title": "Response Time by Sub-Agent",
            "type": "graph",
            "targets": [
              {
                "expr": "claude_api_response_time_seconds",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 6}
          },
          {
            "id": 4,
            "title": "Context Token Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "claude_context_tokens_used",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 14}
          },
          {
            "id": 5,
            "title": "Active Conversations",
            "type": "graph",
            "targets": [
              {
                "expr": "claude_active_conversations",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 14}
          },
          {
            "id": 6,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(claude_api_errors_total[5m])",
                "legendFormat": "{{ sub_agent_id }}"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 22}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: booking-system
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      serviceAccountName: booking-system-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: web
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: booking-system-secrets
              key: GRAFANA_ADMIN_PASSWORD
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SERVER_ROOT_URL
          value: "http://localhost:3000/grafana/"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: "true"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-kubernetes-app"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        livenessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: booking-system
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: web
    name: web
  selector:
    app: grafana
    component: monitoring
---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: booking-system
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
# Grafana Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: booking-system
  labels:
    app: grafana
    component: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - monitoring.booking-system.example.com
    secretName: grafana-tls
  rules:
  - host: monitoring.booking-system.example.com
    http:
      paths:
      - path: /grafana(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000