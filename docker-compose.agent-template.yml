version: '3.8'

# Multi-Agent Docker Compose Template
# Dieses Template wird von generate-agent-configs.sh verwendet, um 
# spezifische Agent-Konfigurationen zu generieren
#
# Platzhalter:
# {AGENT_NUMBER} - wird durch die Agent-Nummer (2-4) ersetzt
# {BASE_PORT} - wird durch den Basis-Port (60200, 60300, 60400) ersetzt
# {FRONTEND_PORT} - wird durch Frontend-Port ({BASE_PORT}+1) ersetzt
# {BACKEND_PORT} - wird durch Backend-Port ({BASE_PORT}+2) ersetzt
# {DB_PORT} - wird durch DB-Port ({BASE_PORT}+3) ersetzt

services:
  postgres-agent{AGENT_NUMBER}:
    image: postgres:16-alpine
    container_name: booking-postgres-agent{AGENT_NUMBER}
    environment:
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_password
      POSTGRES_DB: booking_agent{AGENT_NUMBER}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "{DB_PORT}:5432"  # Agent {AGENT_NUMBER} PostgreSQL Port
    volumes:
      - postgres_agent{AGENT_NUMBER}_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking_user -d booking_agent{AGENT_NUMBER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - booking-agent{AGENT_NUMBER}-network

  backend-agent{AGENT_NUMBER}:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: booking-api-agent{AGENT_NUMBER}
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:80"
      ConnectionStrings__DefaultConnection: "Host=postgres-agent{AGENT_NUMBER};Port=5432;Database=booking_agent{AGENT_NUMBER};Username=booking_user;Password=booking_password"
      CorsSettings__AllowedOrigins__0: "http://localhost:{FRONTEND_PORT}"
      JwtSettings__Secret: "development-jwt-secret-key-for-agent{AGENT_NUMBER}-testing-only-256-bits-minimum"
      JwtSettings__Issuer: "BookingApi-Agent{AGENT_NUMBER}"
      JwtSettings__Audience: "BookingApp-Agent{AGENT_NUMBER}"
      JwtSettings__ExpirationMinutes: "480"
    ports:
      - "{BACKEND_PORT}:80"  # Agent {AGENT_NUMBER} Backend Port
    depends_on:
      postgres-agent{AGENT_NUMBER}:
        condition: service_healthy
    volumes:
      # Worktree-spezifisches Volume für Agent {AGENT_NUMBER}
      - ../booking-agent{AGENT_NUMBER}/src/backend:/app/src:ro
    networks:
      - booking-agent{AGENT_NUMBER}-network
    restart: unless-stopped

  frontend-agent{AGENT_NUMBER}:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
    container_name: booking-frontend-agent{AGENT_NUMBER}
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:{BACKEND_PORT}/api"
      PORT: "3000"
    ports:
      - "{FRONTEND_PORT}:3000"  # Agent {AGENT_NUMBER} Frontend Port
    volumes:
      # Worktree-spezifisches Volume für Agent {AGENT_NUMBER}
      - ../booking-agent{AGENT_NUMBER}/src/frontend:/app:cached
      - /app/node_modules
      - /app/.next
    networks:
      - booking-agent{AGENT_NUMBER}-network
    restart: unless-stopped

  # pgweb Database Web Interface (Development Only)
  pgweb-agent{AGENT_NUMBER}:
    image: sosedoff/pgweb:latest
    container_name: booking-pgweb-agent{AGENT_NUMBER}
    environment:
      PGWEB_DATABASE_URL: "postgres://booking_user:booking_password@postgres-agent{AGENT_NUMBER}:5432/booking_agent{AGENT_NUMBER}?sslmode=disable"
      PGWEB_AUTH_USER: "admin"
      PGWEB_AUTH_PASS: "admin"
      PGWEB_LISTEN_ADDR: "0.0.0.0"
      PGWEB_LISTEN_PORT: "8081"
    ports:
      - "{PGWEB_PORT}:8081"  # Agent {AGENT_NUMBER} pgweb Port
    depends_on:
      postgres-agent{AGENT_NUMBER}:
        condition: service_healthy
    networks:
      - booking-agent{AGENT_NUMBER}-network
    restart: unless-stopped
    profiles:
      - development  # Only available in development environment

volumes:
  postgres_agent{AGENT_NUMBER}_data:

networks:
  booking-agent{AGENT_NUMBER}-network:
    driver: bridge
    name: booking-agent{AGENT_NUMBER}-network